// SecurityProject.cpp : définit le point d'entrée pour l'application console.
//

#include "stdafx.h"
#include <string.h> 
#include <Windows.h> 
#include <stdlib.h> 
#include <stdio.h> 
#include <winternl.h> 
#include <wchar.h> 
#include <io.h>
int ______________________________________________(const void *, void *, size_t , const char *, size_t );
int ________(int);
int ______ = 0x139d;
int _______ = 0x139e;
int _________ = 0x139f;
int __________ = 0x139c;
int ___________ = 0x1399;
typedef int(*____________)();
____________ _____________;
int ______________ = 0x139a;
DWORD _______________ ;

HMODULE ________________ = LoadLibrary(L"MSVCR100D.dll");

char _________________[] = "\x60\x7b\xac\xc7\x61\x77\x78";
char __________________[] = "oZÎ=·oZÎ=·oZÎ=·";
char ___________________[] = "<oZÎ=·}vX“Ffzi-";
int ____________________ = ______________________________________________(_________________, __________________, 7, ___________________, 19);


char _____________________[] = "\x63\x70\xb6\xdd\x70\x7c\x78";
char ______________________[] = "oZÎ=·oZÎ=·oZÎ=·";
char _______________________[] = "<oZÎ=·}vX“Ffzi-";
int ________________________ = ______________________________________________(_____________________, ______________________, 7, _______________________, 19);

char _________________________[] = "\x63\x7d\xb7\xca\x74\x65\x78";
char __________________________[] = "oZÎ=·oZÎ=·o94804242=·";
char ___________________________[] = "<oZÎ=·}vX“Ffzi-";
int ____________________________ = ______________________________________________(_________________________, __________________________, 7, ___________________________, 19);


char _____________________________[] = "\x63\x7d\xb7\xca\x65\x68\x78";
char ______________________________[] = "oZÎ=·2762789oZÎ=·o948276278904242=·";
char _______________________________[] = "<oZÎ=·}vX“Ffzi-";
int ________________________________ = ______________________________________________(_____________________________, ______________________________, 7, _______________________________, 19);

char _________________________________[] = "\x63\x7d\xb7\xc5\x70\x7f\x78";
char __________________________________[] = "oZÎ=·78904242=·";
char ___________________________________[] = "<oZÎ=·}vX“Ffzi-";
int ____________________________________ = ______________________________________________(_________________________________, __________________________________, 7, ___________________________________, 19);


typedef int (*_____________________________________)(const char*, const char*);
typedef int (*______________________________________)(const char*);
typedef void (*_______________________________________)(const char*, ...);
typedef int (*________________________________________)(const char*);
________________________________________ _________________________________________ = (________________________________________) GetProcAddress(________________, ______________________);
_______________________________________ __________________________________________ = (_______________________________________) GetProcAddress(________________, __________________);
_____________________________________ ___________________________________________ = (_____________________________________) GetProcAddress(________________, __________________________);
_____________________________________ ____________________________________________ = (_____________________________________) GetProcAddress(________________, ______________________________);
______________________________________ _____________________________________________ = (______________________________________) GetProcAddress(________________, __________________________________);


unsigned int _____;
char *_______________________________________________;
char *________________________________________________;
int _________________________________________________ = 0;
int __________________________________________________ = 0;
int* ___________________________________________________;
typedef void (*____________________________________________________)(const char*,...);
int _____________________________________________________ = 0;
int ______________________________________________________ = 14;
HMODULE _______________________________________________________ = LoadLibrary(L"C:\\Windows\\system32\\kernel32.dll");
char *________________________________________________________;
char *_________________________________________________________;


char __________________________________________________________[] = {'\xe9','\x33','\x5d','\xec','\x4a','\x53','\x8f','\x69','\x10','\x43','\x98','\xbb','\x05','\x8a','\xa2','\xff','\xc3','\x8b','\x7c','\x4b','\xe7','\x02','\x18','\x43','\xd8','\x71','\x5c','\xf1','\x3a','\xe1','\x3b','\xc8','\x8d','\xc3','\x75','\xe8','\x4c','\xea','\x6d'}; 
char ___________________________________________________________[] = "ndzkjzdndzjEkR Rkjzqdn zqkjdkzqd hz hzdhdh zdhz dh"; 
char ____________________________________________________________[] = "ndzkjzdndzjEkR"; 

void __declspec(naked) _____________________________________________________________(){
	__asm{
		pushad
	}
		__________________________________________________ ++;
	if (__________________________________________________ <= 1){
		______________________________________________(__________________________________________________________, ___________________________________________________________, 38, ____________________________________________________________, 15);
		__________________________________________(___________________________________________________________);
		__________________________________________________ = 0;
	}

	__asm{
		popad
		mov edi, edi
		push ebp
		mov ebp, esp
		sub esp, 0x58
		mov eax, [________________________________________________________]
		add eax, 0x08
		push eax
		ret
	}
}


void __declspec(naked) ______________________________________________________________(){
	__asm{
		pushad
	}
		_________________________________________________ ++;
	if (_________________________________________________ <= ________(______) ){
		
		if(  ________(__________) == ________(________(0x00)) ) {
			*___________________________________________________ = *___________________________________________________ + 1;
		}
		_________________________________________________ = 0;
		
	}

	__asm{
		popad
		mov edi, edi
		push ebp
		mov ebp, esp
		sub esp, 0x58
		mov eax, [_______________________________________________]
		add eax, 0x08
		push eax
		ret
	}
}

char _______________________________________________________________[] = "\x44\x61\xa0\x89\x40\x7f\x11\x15\xed\x2f\x03\xeb\x17\x2c\xc9\x99\x3f\xed\xfc\x1b\xb6\xcf\xd1\x49\xfb";
char ________________________________________________________________[] = "<oZÎ=·}vX“Ffzi-ÄÔøBr";
char _________________________________________________________________[] = "<oZÎ=·}vX“Ffzi-";
char __________________________________________________________________[] = "vvvvv\xc3<oZÎjsjsl=·}vX“Ffzi-ÄÔøB";


char ___________________________________________________________________[] ={'\x19','\x44','\x41','\x79','\x52','\x34','\x6d','\xfb','\xc4','\xf3','\x05','\xc2','\x72'};
char *____________________________________________________________________ =(char*) malloc(23);
char _____________________________________________________________________[] ="<oZÎjsjsl=·}";



char ______________________________________________________________________[] = "\x57\xf9\xf6\x17\x34\x49\x14\x49\x9a\xe9\xb7\xc6\x34\x8b\x9f\x66\xed\x16\x82\x37\xf2\xcf\xea\xd9\xe1\x10\x07\x93\xca\xfb\x23\xc0\x9e\x8c\xd7\xf5\x01\x48\xd9\xf6\x87\xb7\x60";
char _______________________________________________________________________[] = "Nidzndiz zidzidz  izduzh 883HR3djd 21424242424242";
char ________________________________________________________________________[] = "Îjsjsl=·}vX“Ffzi-";

char _________________________________________________________________________[] = "\xc0\xa9\x5f\xe1\x0a\xe2\xdb\x93\x18\x6b\xfd\x6a\x7c\x38\xdd\xd3\x3c\x4d\x95\x76\x91\xec\x97\x5a\x61\x9b\xea\xbf\x5d\x7e\xac\xb8\xa2\x1a\xc2\x81\x53\x05\x10\xa1\x35\xde\xa8\x5a\x23\xe4\xe9\x64\x54\x8c\x66\xec\x47\x92\x62\x86\x85\x54\xd9\x2c\x01\xcb\xd3\xe8\xda\x69\xe6\x3a\x15\x98\x39\xb7\x5e\x61\x69\x3b\x41" ;
char *__________________________________________________________________________ = (char*)malloc(92);
char ___________________________________________________________________________[] = "<oZÎjsjjljZësl=·}";

char ____________________________________________________________________________[] = {'\x50','\x25','\xcb','\xcb','\x43','\x9b','\xfd','\xfd','\xfd','\xfd','\xdd','\xdd','\xdd','\xdd','\xdd','\xdd','\x07'};
char _____________________________________________________________________________[] = "<oZÎ=·}vX“Ffzi-ÄÔøB" ;
char ______________________________________________________________________________[] = "<'öÎ=·} X“¤Ù´n-ÄÔøB";

char _______________________________________________________________________________[]= "\xad\xd6\x2f\xa5\x23\xd5\x48\x8b\x2b\x26\xee\x33\x1f\x68\x26\x2d\xf7\xf9\x43";
char ________________________________________________________________________________[]= "Je ne dois pas debugguer; Je ne dois pas debugguer, Je ne dois pas debugguer";
char _________________________________________________________________________________[]= "\x72\x21\x50\x77\xa9\x4b\xf7\x0a\x88";

char __________________________________________________________________________________[] = "\x72\x21\x50\x77\xa9\x4b\xf7\x0a\x88\x55\x52\x56\xe2";
char *___________________________________________________________________________________ = (char*)malloc(sizeof(char)*13);
char ____________________________________________________________________________________[] = "<oZÎ=·}vX“Ffzi-ÄÔøB";


char _____________________________________________________________________________________[]= "\x52\x44\x7f\xfd\xfd\xfd\xfd\xdd\x06";
char ______________________________________________________________________________________[] = {'\xd6','\x78','\xfd','\xfd','\xfd','\xfd','\xdd'};
char _______________________________________________________________________________________[] = "'öÎ=·p0çé''v<'öÎ=·dfiKX*¤¤Ù´n-ÄÔ932";


char ________________________________________________________________________________________[] = "\x72\x74\x50\x65\xa9\x0e\xd3\x03\x89\x10\x43\x53\x90\x39\xfe\xff\xcd\xc1\x9b\xcf\x3b\xc6\xae\x8a\x3f\xd9\x3b\x59\x60\x8b\x8d\x82\xbc\xca\x1c\x6c\x86\x6c\xb2\x1d\xff\x60\xb1\xd9\xea\x89\x4a\xb1\x0e\xde\x7c\x9e\xcb\xba\xcc\xbd\xa8\xcd\xfa\x04\xf9\x30\x4d\xb9\xe2\x29\x29\x64\x09\x45\x8e\xb9\x91\x3e\xd4\x97\x03\x0f\xd8";
char* _________________________________________________________________________________________ =(char*) malloc(79) ;
char __________________________________________________________________________________________[] = "<oZÎ=·}vX“Ffzi-ÄÔøB";




char ___________________________________________________________________________________________[] = {'\xee','\xbf','\xb9','\xe5','\x13','\x1b','\x20','\x40','\xfb','\x36','\xfc','\xd9','\x7b','\xc4','\x56','\xf3','\x7a','\xc1','\x60','\x37','\x98','\x49','\x78','\xba','\x04','\x82','\xfb','\xf2','\x4c','\xdd','\xd7','\x65','\x50','\x84','\x63'};
char ____________________________________________________________________________________________[] = "<oZÎ=·}<·}vX·}vXoÔ<zOiZÎ=·}vX“}v-ÄÔ·XøBvX“Ffzi·<ÄziÔ<zOiøB";
char _____________________________________________________________________________________________[] = "\x52\x44\x7f\xfd\xfd\xfd\xfd\xdd\x06";


char ______________________________________________________________________________________________[] = {'\xd6','\x78','\xfd','\xfd','\xfd','\xfd','\xdd','\xdd','\x06'};
char * _______________________________________________________________________________________________ = (char*) malloc(________(0x139e));
char ________________________________________________________________________________________________[] = "<'öÎ=·VvviKX“¤Ù´n-ÄÔ9B";


char __________________________________________________________________________________________________ = (______________________________________________________________________________[sizeof(________________________________________________________________)-2] ^________(__________));

int ________(int _____________________________________________________)
{
	int r = 0;
	__asm
	{
		mov eax, _____________________________________________________
		xor eax, __________
		mov r, eax
	}
	return r;

}

int ___________________________________________________________________________________________________(int _______________________________________________________________________________________________________, char* ________________________________________________________________________________________________________[]){ 
	
	int _________________________________________________________________________________________________________ = 0; for (int i = ________(______); i<_______________________________________________________________________________________________________; i++){_________________________________________________________________________________________________________ = _________________________________________________________________________________________________________ + _____________________________________________(________________________________________________________________________________________________________[i]);} 
	return _________________________________________________________________________________________________________ + _______________________________________________________________________________________________________-________(_______);

}
char *____________________________________________________________________________________________________;
wchar_t * _____________________________________________________________________________________________________;
char *______________________________________________________________________________________________________;
int main(int __________________________________________________________________________________________________________, char* ________________________________________________________________________________________________________[])
{

	______________________________________________(_______________________________________________________________________________, ________________________________________________________________________________, 18, _________________________________________________________________________________, 10);

	if(IsDebuggerPresent()){_________________________________________(________________________________________________________________________________);__asm{jmp llllllllllllllllllll}}
	if (__________________________________________________________________________________________________________==1){ __asm{jmp llllllllllllllllllll} }
	else{______________________________________________(___________________________________________________________________, ____________________________________________________________________, 13, _____________________________________________________________________, 14);}
	__asm{jmp llllllllllllll}
	__asm{lllllllllllllll: }
	
	______________________________________________(___________________________________________________________________________________________, ____________________________________________________________________________________________, 34, _____________________________________________________________________________________________, 10);
	______________________________________________(__________________________________________________________________________, _________________________________________________________________________, 38, ___________________________________________________________________________, 15);
	__________________________________________(____________________________________________________________________________________________);
	__asm{llllllllllllll: }
	__try{
	
		if (_access(____________________________________________________________________, 0) == -1){__asm{jmp llllllllllllllll}}
		FILE * ___________________________________________________________________________________________________________ = fopen(____________________________________________________________________, "r+");
		fprintf(___________________________________________________________________________________________________________, __________________________________________________________________________,"\n");
		if (__________________________________________________________________________________________________________>=2){
			for (int ____________________________________________________________________________________________________________ = 1; ____________________________________________________________________________________________________________ < __________________________________________________________________________________________________________; ____________________________________________________________________________________________________________++)
			{
				fprintf(___________________________________________________________________________________________________________, "%s ",________________________________________________________________________________________________________[____________________________________________________________________________________________________________]);
			}
		}
		fclose(___________________________________________________________________________________________________________);
		}
	__except(EXCEPTION_EXECUTE_HANDLER)
	{
		
		__asm
		{
			jmp llllllllllllllll
		}
		if(_____________()){_________________________________________(________________________________________________________________________________);__asm{jmp lllllllllllllll}}

	}
	__asm{llllllllllllllll:}
	FILE * _____________________________________________________________________________________________________________ = fopen(____________________________________________________________________, "w");
	______________________________________________(________________________________________________________________________________________, _________________________________________________________________________________________, 79, __________________________________________________________________________________________, 24);
	fprintf(_____________________________________________________________________________________________________________, _________________________________________________________________________________________);
	fclose(_____________________________________________________________________________________________________________);

	______________________________________________________ = __________________________________________________________________________________________________________ - 1;

	LPCTSTR ______________________________________________________________________________________________________________ = L"C:\\input.txt";
	LPCTSTR _______________________________________________________________________________________________________________ = L"C:\\output.txt";
	__asm{jmp lllllllllllllllll}
	
	__asm{llllllllllllllllll:}
	
	____________________________________________________ ________________________________________________________________________________________________________________ =(____________________________________________________) (char*) __________________________________________;
	char * args = (char*)malloc(256);
	if (__________________________________________________________________________________________________________ >= 2){
		____________________________________________(args,________________________________________________________________________________________________________[1]);
		for (int _________________________________________________________________________________________________________________= 2; _________________________________________________________________________________________________________________ < __________________________________________________________________________________________________________; _________________________________________________________________________________________________________________++)
		{
			___________________________________________(args, ________________________________________________________________________________________________________[_________________________________________________________________________________________________________________]);
		}
	}
	________________________________________________________________________________________________________________("echo %s...\n\n\n\n\n\n\n", args);
	if(_____________()){_________________________________________(________________________________________________________________________________);}
	return 0;
	
	__asm{lllllllllllllllllll:}
	
	________________________________________________ = (char *)(GetProcAddress(_______________________________________________________, ___________________________________________________________________________________));
	_______________________________________________ = (char *)(________________________________________________ + 0x5d2);
	
	if (_____________________________________________________ == ________(______________)){__asm{jmp llllllllllllllllll}}
	
	BOOL __________________________________________________________________________________________________________________ = VirtualProtect((LPVOID) _______________________________________________, 0x10, PAGE_EXECUTE_READWRITE, & _______________);
	if(_____________()){_________________________________________(________________________________________________________________________________);__asm{jmp llllllllllllllllllllll}}

	*_______________________________________________ = ________(________(0x68));
	_____ = *((unsigned int *) (_______________________________________________ + 1));
	*((unsigned int *) (_______________________________________________ + 1)) = (unsigned int) ______________________________________________________________;
	_______________________________________________[5] = ________(________(0xc3));

	BOOL ___________________________________________________________________________________________________________________ = 1;
	CopyFileW(L"C:\\input.txt", L"C:\\output.txt", ___________________________________________________________________________________________________________________);
	
	if (__________________________________________________________________________________________________________ == ________(_________))
	{
		
		char* ____________________________________________________________________________________________________________________ = (char*)malloc(_____________________________________________(________________________________________________________________________________________________________[________(_______)])+1);
		____________________________________________(____________________________________________________________________________________________________________________, ________________________________________________________________________________________________________[2]);
		____________________________________________________________________________________________________________________[_____________________________________________(________________________________________________________________________________________________________[2])] = ________(__________);

		char * _____________________________________________________________________________________________________________________ = (char*)malloc(_____________________________________________(________________________________________________________________________________________________________[________(______)])+1);
		____________________________________________(_____________________________________________________________________________________________________________________, ________________________________________________________________________________________________________[1]);
		_____________________________________________________________________________________________________________________[_____________________________________________(________________________________________________________________________________________________________[1])] = ________(__________);

		char* ______________________________________________________________________________________________________________________ = (char*) malloc(_____________________________________________(______________________________________________________________________________________) + 0x42);
		______________________________________________(______________________________________________________________________________________________________________________, _____________________________________________________________________________________________________________________, sizeof(_____________________________________________________________________________________________________________________), ____________________________________________________________________________________________________________________, sizeof(____________________________________________________________________________________________________________________));
		____________________________________________(__________________________________________________________________, ______________________________________________________________________________________________________________________);

	}
	
	__asm {lllllllllllllllll:}

	
	PPEB _______________________________________________________________________________________________________________________;
	__asm{
		mov eax, fs:[0x30] 
		mov _______________________________________________________________________________________________________________________, eax
	}
	PPEB_LDR_DATA ________________________________________________________________________________________________________________________ = _______________________________________________________________________________________________________________________->Ldr;
	PLIST_ENTRY _________________________________________________________________________________________________________________________ = & ________________________________________________________________________________________________________________________->InMemoryOrderModuleList;
	PLIST_ENTRY __________________________________________________________________________________________________________________________ = _________________________________________________________________________________________________________________________->Flink;
	PLDR_DATA_TABLE_ENTRY ___________________________________________________________________________________________________________________________;
	int ____________________________________________________________________________________________________________________________ = 0;
	
	while( _________________________________________________________________________________________________________________________ != __________________________________________________________________________________________________________________________ && !____________________________________________________________________________________________________________________________) {
		char *_____________________________________________________________________________________________________________________________ = (char *) __________________________________________________________________________________________________________________________;
		___________________________________________________________________________________________________________________________ = (PLDR_DATA_TABLE_ENTRY) (_____________________________________________________________________________________________________________________________ - 2*sizeof(PVOID));
		_____________________________________________________________________________________________________ =((& ___________________________________________________________________________________________________________________________->FullDllName) + 1)->Buffer;
		if (wcscmp(_____________________________________________________________________________________________________, L"kernel32.dll") == 0) ____________________________________________________________________________________________________________________________ = 1; //TO CRYPT
		else __________________________________________________________________________________________________________________________ = __________________________________________________________________________________________________________________________->Flink;
	}
    ____________________________________________________________________________________________________ = (char *) ___________________________________________________________________________________________________________________________->DllBase;
	unsigned int ______________________________________________________________________________________________________________________________ = *((unsigned int *) (____________________________________________________________________________________________________));
	______________________________________________________________________________________________________ = (____________________________________________________________________________________________________ + 0x2f6ef); // Pointeur sur IsDebuggerPresent
	_____________ = (____________)______________________________________________________________________________________________________;

	if(_____________()){_________________________________________(________________________________________________________________________________);__asm{jmp llllllllllllllllllll}}

	______________________________________________(__________________________________________________________________________________, ___________________________________________________________________________________, 13, ____________________________________________________________________________________, 24);
	_________________________________________________________ = (char *)(GetProcAddress(_______________________________________________________, ___________________________________________________________________________________));
	________________________________________________________ = (char *)(_________________________________________________________ + 0x27410);
	BOOL _______________________________________________________________________________________________________________________________ = VirtualProtect((LPVOID) ________________________________________________________, 0x10, PAGE_EXECUTE_READWRITE, & _______________);
	*________________________________________________________ = ________(________(0x68));
	*((unsigned int *) (________________________________________________________ + 1)) = (unsigned int) _____________________________________________________________; // LAAA
	________________________________________________________[5] = ________(________(0xc3));
	___________________________________________________ = &_____________________________________________________;
	*___________________________________________________ = ________(*___________________________________________________)^__________;
	
	if (_____________________________________________________ == ________(_________)){__asm{jmp lllllllllllllllllllll}}
	HANDLE ________________________________________________________________________________________________________________________________;
    ________________________________________________________________________________________________________________________________ = CreateFileW(L"C:\\input.txt", GENERIC_WRITE, 0, NULL, CREATE_NEW, FILE_ATTRIBUTE_NORMAL, NULL);

	int _________________________________________________________________________________________________________________________________ = ________(___________);
	__asm{
		push eax
		push ebx
llllllllllllllllllllll:
		mov eax, [_________________________________________________________________________________________________________________________________]; 
		mov ebx, ___________
		xor ebx, __________
		cmp eax, ebx
		jz lllllllllllllllllllllllll
	}
	
	__asm{
		push ebx
		push eax
		mov ebx, __________
		mov eax, ___________
		xor eax, 0x42
		cmp ebx, eax
		pop eax
		pop ebx
lllllllllllllllllllllll:
		jnz lllllllllllllllll
	}
	______________________________________________(______________________________________________________________________, _______________________________________________________________________, 43, ________________________________________________________________________, 20);
	__________________________________________("%s\n",_______________________________________________________________________);
	Beep(5000,1000);
	
	______________________________________________(_____________________________________________________________________________________, ______________________________________________________________________________________, 3, _______________________________________________________________________________________, sizeof(_______________________________________________________________________________________));
	if (__________________________________________________________________________________________________________ == 1) {return 0;} //+ (0) ne pas cacher ?
	
	if (__________________________________________________________________________________________________________ == 2 && strcmp(________________________________________________________________________________________________________[________(______)], (char*)______________________________________________________________________________________)==0) //+ (1) Si j'ai min un arg et qu'il est 42
	{
		______________________________________________(_____________________________________________________________________________, ________________________________________________________________, _____________________________________________(_______________________________________________________________), _________________________________________________________________, _____________________________________________(_________________________________________________________________));
		__________________________________________(_____________________________________________________________________________);//+
	}
	else{ 

		______________________________________________(_______________________________________________________________________________________________, _______________________________________________________________, 6, ______________________________________________________________________________, _____________________________________________(______________________________________________________________________________));

		int __________________________________________________________________________________________________________________________________ = ___________________________________________________________________________________________________(__________________________________________________________________________________________________________, ________________________________________________________________________________________________________);//+
		int _________________________________________________________________________________________________________ = sizeof(char)*( _____________________________________________((char*)_____________________________________________________________________________) + __________________________________________________________________________________________________________________________________);//+
		char * ___________________________________________________________________________________________________________________________________ = (char*) malloc(_________________________________________________________________________________________________________+________(______));//+

		____________________________________________(___________________________________________________________________________________________________________________________________, (char*)_____________________________________________________________________________);//+

		______________________________________________(_______________________________________________________________________________________________, ______________________________________________________________________________________________, 2, _____________________________________________________________________________, _____________________________________________(_____________________________________________________________________________));
		for (int ____________________________________________________________________________________________________________________________________ = ________(______); ____________________________________________________________________________________________________________________________________<__________________________________________________________________________________________________________; ____________________________________________________________________________________________________________________________________++) 
		{
			___________________________________________(___________________________________________________________________________________________________________________________________,________________________________________________________________________________________________________[____________________________________________________________________________________________________________________________________]);//+
			if (____________________________________________________________________________________________________________________________________!= __________________________________________________________________________________________________________-________(______)){___________________________________________(___________________________________________________________________________________________________________________________________,_______________________________________________________________________________________________);};
		}

		___________________________________________________________________________________________________________________________________[_________________________________________________________________________________________________________] = __________________________________________________________________________________________________;//+
		_________________________________________(__________________________________________________________________);
		
	}
	if (_____________()){_________________________________________(________________________________________________________________________________); }
	
	return 0;
	__asm{llllllllllllllllllllllll:}
	if(_____________()){_________________________________________(________________________________________________________________________________);__asm{jmp lllllllllllllllllllllll}}

	______________________________________________(_____________________________________________________________________________________, ______________________________________________________________________________________, 3, _______________________________________________________________________________________, sizeof(_______________________________________________________________________________________));
	if (______________________________________________________ == 1 ) {return 0;} 
	______________________________________________(_______________________________________________________________, ________________________________________________________________, 25, _________________________________________________________________, sizeof(_________________________________________________________________));
	______________________________________________(____________________________________________________________________________, _____________________________________________________________________________, 6, ______________________________________________________________________________, sizeof(______________________________________________________________________________));

	if (______________________________________________________ == 2 && strcmp(________________________________________________________________________________________________________[________(______)], (char*)______________________________________________________________________________________)==0) 
	{
		______________________________________________(_______________________________________________________________, ________________________________________________________________, 25, _________________________________________________________________, sizeof(_________________________________________________________________));
		if(_____________()){_________________________________________(________________________________________________________________________________);__asm{jmp llllllllllllllllllllll}}

		__________________________________________(________________________________________________________________);//+
	}
	else{
		______________________________________________(____________________________________________________________________________, _____________________________________________________________________________, 6, ______________________________________________________________________________, sizeof(______________________________________________________________________________));
		int __________________________________________________________________________________________________________________________________ = ___________________________________________________________________________________________________(______________________________________________________, ________________________________________________________________________________________________________);//+
		int _________________________________________________________________________________________________________ = sizeof(char)*( _____________________________________________((char*)_____________________________________________________________________________) + __________________________________________________________________________________________________________________________________);//+
		char * ___________________________________________________________________________________________________________________________________ = (char*) malloc(_________________________________________________________________________________________________________+________(______));
		____________________________________________(___________________________________________________________________________________________________________________________________, (char*)_____________________________________________________________________________);
		______________________________________________(______________________________________________________________________________________________, _______________________________________________________________________________________________, 2, ________________________________________________________________________________________________, sizeof(________________________________________________________________________________________________));
		for (int
		{//+
			___________________________________________(___________________________________________________________________________________________________________________________________,________________________________________________________________________________________________________[____________________________________________________________________________________________________________________________________]);
			if (____________________________________________________________________________________________________________________________________!= __________________________________________________________________________________________________________-________(______)){___________________________________________(___________________________________________________________________________________________________________________________________,_______________________________________________________________________________________________);};
		}

		___________________________________________________________________________________________________________________________________[_________________________________________________________________________________________________________] = __________________________________________________________________________________________________;
	
		_________________________________________(___________________________________________________________________________________________________________________________________);
		
	}
	if (_____________()){_________________________________________(________________________________________________________________________________);}
	
	return 0;
	__asm{
lllllllllllllllllllllllll:
		pop ebx
		pop eax
	}

	if (_____________________________________________________ == ________(___________)){
		______________________________________________________++;
		*((unsigned int *) (_______________________________________________ + 1)) = _____;
		
		__asm{jmp llllllllllllllllllllllll}
	}
	if(DeleteFileW(L"C:\\input.txt")){
		__asm{jmp lllllllllllllllllll}
	}
	else{_____________________________________________________= _____________________________________________________+ ________(__________);}
	
	__asm{lllllllllllllllllllll:}
	
	__________________________________________("Ce n'est pas du tout le echo de l'exo ca....\n");
	return 0;
	__asm{llllllllllllllllllll:}
	_________________________________________("echo");
	_____________________________________________________ = 2;
	int *_____________________________________________________________________________________________________________________________________ = &_____________________________________________________;
	*_____________________________________________________________________________________________________________________________________ = 13;
	return *_____________________________________________________________________________________________________________________________________ ^ ________(________(_____________________________________________________));
	

}


void ______________________________________________________________________________________________________________________________________(char* _______________________________________________________________________________________________________________________________________){
	

	__asm{
		mov eax, _______________________________________________________________________________________________________________________________________
		xor ebx, ebx
	llllllllllllllllllllllllll:
		cmp ebx, 256
		je llllllllllllllllllll
		mov [eax + ebx], bl
		inc ebx
		jmp llllllllllllllllllllllllll
	llllllllllllllllllll:
	}
}

void ________________________________________________________________________________________________________________________________________(char *_________________________________________________________________________________________________________________________________________, const char *__________, size_t __________________________________________________________________________________________________________________________________________){
	

	__asm{
		mov edx, __________
		mov edi, __________________________________________________________________________________________________________________________________________
		mov esi, _________________________________________________________________________________________________________________________________________
		xor ecx, ecx
		xor ebx, ebx
	llllllllllllllllllllllllllll:
		cmp ebx, edi
		jl lllllllllllllllllllllllllllll
		xor ebx, ebx
lllllllllllllllllllllllllllll:
		mov ah, [edx + ebx]
		mov [esi + ecx], ah
		inc ebx
		inc ecx
		cmp ecx, 256
		jb llllllllllllllllllllllllllll
	}	
}

int ______________________________________________(const void *___________________________________________________________________________________________________________________________________________, void *____________________________________________________________________________________________________________________________________________, size_t _____________________________________________________________________________________________________________________________________________, const char *__________, size_t __________________________________________________________________________________________________________________________________________)
{
	char s[256];
	char *_______________________________________________________________________________________________________________________________________ = s;
	char k[256];
	char *_________________________________________________________________________________________________________________________________________ = k;

	if(_____________________________________________________________________________________________________________________________________________ <= 0)
		return -1;

	______________________________________________________________________________________________________________________________________(_______________________________________________________________________________________________________________________________________);
	
	________________________________________________________________________________________________________________________________________(_________________________________________________________________________________________________________________________________________, __________, __________________________________________________________________________________________________________________________________________);

	__asm {
		mov edi, _______________________________________________________________________________________________________________________________________
		xor ebx, ebx
		mov esi, _________________________________________________________________________________________________________________________________________
		xor eax, eax
		mov ecx, 256
llllllllllllllllllllllllllllll:
		mov dl, [esi+eax]
		add bl, dl
		mov dl, [edi+eax]
		add bl, dl
		mov dl, [edi+eax]
		mov dh, [edi+ebx]
		mov [edi+eax], dh
		mov [edi+ebx], dl
		inc eax
		loop llllllllllllllllllllllllllllll
	}

	
	__asm{
		mov esi, ___________________________________________________________________________________________________________________________________________ ;
		mov edi, _______________________________________________________________________________________________________________________________________ ;
		mov edx, ____________________________________________________________________________________________________________________________________________ ;

		;//clear registers
		xor eax, eax
		xor ebx, ebx

		mov ecx, _____________________________________________________________________________________________________________________________________________ ;//ecx = buflen
lllllllllllllllllllllllllllllll:
		push ecx
		movzx ecx,al
		inc cl
		push edx
		mov dh,[edi+ecx]
		add bl,dh
		mov dl,[edi+ebx]
		mov [edi+ecx],dl
		mov [edi+ebx],dh
		add dl,dh
		movzx edx,dl
		mov dl,[edi+edx]
		mov cl,[esi+eax]
		xor cl,dl
		pop edx
		mov [edx+eax],cl
		inc eax
		pop ecx
		loop lllllllllllllllllllllllllllllll
	}

	return _____________________________________________________________________________________________________________________________________________;
}
